<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function() {
  var c = this;

  c.myStates = ['Scheduled', 'In Progress', 'Done', 'Closed Complete'];
  c.filterState = '';
  c.sortColumnName = 'date'; // Default column to sort by
  c.sortAscending = true;    // Default sort order is ascending

  c.currentPage = 0; // Default page
  c.pageSize = 6; // Number of tasks per page
  c.totalPages = 0;

  // Filters and sorts tasks
  c.filteredTasks = function() {
    var tasks = c.data.tasks;

    // Filter tasks by state
    if (c.filterState) {
      tasks = tasks.filter(function(task) {
        return task.state === c.filterState;
      });
    }

    // Sort tasks by the selected column
    tasks.sort(function(a, b) {
      var valueA = a[c.sortColumnName];
      var valueB = b[c.sortColumnName];

      // Handle string comparison
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        valueA = valueA.toLowerCase();
        valueB = valueB.toLowerCase();
      }

      // Sort logic
      if (valueA < valueB) return c.sortAscending ? -1 : 1;
      if (valueA > valueB) return c.sortAscending ? 1 : -1;
      return 0;
    });

    // Update totalPages based on filtered tasks
    c.totalPages = Math.ceil(tasks.length / c.pageSize);

    return tasks;
  };

  // Handles sorting when a column header is clicked
  c.sortColumn = function(columnName) {
    if (c.sortColumnName === columnName) {
      // Toggle sort order if the same column is clicked
      c.sortAscending = !c.sortAscending;
    } else {
      // Change to the new column and reset to ascending order
      c.sortColumnName = columnName;
      c.sortAscending = true;
    }
  };

  // Returns the appropriate icon class for the column header
  c.getSortIcon = function(columnName) {
    if (c.sortColumnName === columnName) {
      return c.sortAscending ? 'fa-sort-up' : 'fa-sort-down';
    }
    return 'fa-sort';
  };

  // Paginated tasks (after filter applied)
  c.paginatedTasks = function() {
    var filtered = c.filteredTasks(); // Apply the filter globally
    var startIndex = c.currentPage * c.pageSize;
    var endIndex = startIndex + c.pageSize;
    return filtered.slice(startIndex, endIndex);
  };

  // Changes the current page
  c.changePage = function(page) {
    if (page < 0 || page >= c.totalPages) return;
    c.currentPage = page;
  };

  // Reset pagination to first page whenever the filter changes
  c.onFilterChange = function() {
    c.currentPage = 0; // Reset to first page when filter changes
  };

  c.data.images = [
    {
      src: '/x_1522458_automo_0.beginner_1.png',
      alt: 'First Image',
    },
    {
      src: '/x_1522458_automo_0.intermediate_1.png',
      alt: 'Second Image',
    },
    {
      src: '/x_1522458_automo_0.advanced_1.png',
      alt: 'Third Image',
    },
    {
      src: '/x_1522458_automo_0.master.png',
      alt: 'Fourth Image',
    },
    {
      src: '/x_1522458_automo_0.expert.png',
      alt: 'Fifth Image',
    },
  ];

  c.getEndIntervalOfLevel = function() {
    switch(c.data.profileData[0].Level) {
      case 'Beginner': return 50;
      case 'Intermediate': return 100;
      case 'Advanced': return 200;
      case 'Master': return 350;
      case 'Expert': return 500;
      default: return 'End Interval not found';
    }
  };

  c.getCurrentLevel = function() {
    switch(c.data.profileData[0].Level) {
      case 'Beginner': return 0;
      case 'Intermediate': return 1;
      case 'Advanced': return 2;
      case 'Master': return 3;
      case 'Expert': return 4;
      default: return 'Level not found';
    }
  };

  c.getColorHexa = function() {
    switch(c.data.profileData[0].Level) {
      case 'Beginner': return '#23a6d7';
      case 'Intermediate': return '#945414';
      case 'Advanced': return '#2b385a';
      case 'Master': return '#f5e292';
      case 'Expert': return '#3b3e43';
      default: return 'Level not found';
    }
  };
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>/* General body styling */
body {
  font-family: 'Arial', sans-serif;
  background-color: #f4f4f9;
  margin: 20px;
  color: #333;
}

tbody tr:nth-child(even) {
  background-color: #f1f3f8;
}

tbody tr:hover {
  background-color: #e8f6ff;
  cursor: pointer;
}

/* Responsive adjustments */
@media (max-width: 780px) {
  .filter-sort-container {
    margin: 0% !important;
  }
  table {
    font-size: 12px;
  }
  td, th {
    padding: 10px;
  }
  .header-container {
    display: flex;
    flex-direction: column;
  }
  .main {
    font-size: 30px;
  }
}

.noTasks {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 80vh;
  color: #888;
}

.noTasks i {
  font-size: 80px;
  margin-bottom: 20px;
  color: #aaa;
}

.noTasks p {
  font-size: 24px;
  font-weight: bold;
}

.container {
  position: relative;
  padding-bottom: 70px;
  margin-top: 20px;
}

.tableContainer {
  font-family: Arial, sans-serif;
  margin: 20px;
  display: block;
}

.filter-sort-container {
  display: flex;
  gap: 15px;
  align-items: center;
  margin-left: 51%;
}

label {
  font-size: 14px;
  color: #333;
  font-weight: bold;
}

select {
  padding: 8px 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
  color: #555;
  background-color: #fff;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: border-color 0.3s ease;
}

select:hover {
  cursor: pointer;
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}

h3 {
  color: #034078;
}

table {
  width: 100%;
  border-collapse: collapse;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  background-color: #FFFFFF;
  border-radius: 8px;
}

thead {
  background-color: #034078;
  color: #ffffff;
  text-transform: uppercase;
  font-size: 12px;
}

.filter-level-container {
  display: flex;
  align-items: center;
  gap: 20px;
}

.filter-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
}

.levelInfo {
  display: flex;
  align-items: center;
  gap: 10px;
}

.points {
  margin-right: -12px;
  margin-bottom: 5px;
}

.levelImg .Img {
  width: 80px;
  height: auto;
}

th, td {
  padding: 12px 16px;
  text-align: center;
  vertical-align: middle;
}

th:first-child {
  border-top-left-radius: 8px;
}

th:last-child {
  border-top-right-radius: 8px;
}

tbody tr {
  border-bottom: 1px solid #E0E0E0;
}

a {
  color: #4A90E2;
  text-decoration: none;
  font-weight: 600;
}

a:hover {
  text-decoration: underline;
}

.status {
  font-weight: bold;
  padding: 6px 8px;
  border-radius: 10px;
  color: #ffffff;
  text-transform: uppercase;
  font-size: 10px;
}

.status.scheduled {
  background-color: #a19a88;
}

.status.in-progress {
  background-color: #29B6F6;
}

.status.done {
  background-color: #FFB74D;
}

.status.closed-complete {
  background-color: #4CAF50;
}

.status.closed-incomplete {
  background-color: #E57373;
}

.sort-container {
  margin: 10px 0;
}

tbody td {
  border-radius: 0;
}

.Img {
  width: 110%;
}

.levelInfo {
  display: flex;
  flex-direction: row;
  align-items: end;
  width: 100%;
}

.main {
  width: 30%;
}

/* Pagination Styling */
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  margin-top: 20px;
}

.pagination button {
  padding: 8px 15px;
  background-color: #034078;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.pagination button:disabled {
  background-color: #ccc;
}

.pagination span {
  font-size: 16px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>asm_my_tasks_-_technician</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>My Tasks - Technician</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    if (!input) {
        data.tasks = []; // Initialize an empty array to hold the tasks

        // Query the 'x_1522458_automo_0_task' table
        var grTasks = new GlideRecordSecure('x_1522458_automo_0_task');
        grTasks.addActiveQuery(); // Filter for active tasks
			  grTasks.addEncodedQuery("assined_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe");
        grTasks.query();

        // Loop through the tasks and push required fields into the data array
        while (grTasks.next()) {
            data.tasks.push({
							  number: grTasks.getDisplayValue('number'),
							  state:grTasks.getDisplayValue('state'),// Assuming 'short_description' holds task descr
                date: grTasks.getValue('date'),
                Id: grTasks.getUniqueValue() // Unique identifier for potential redirects
            });
        }
    }

	data.profileData=[];
		var gr_profile = new GlideRecordSecure('x_1522458_automo_0_technician_profile');
	var technicianSysId = gs.getUserID();
	gr_profile.addQuery('technician',technicianSysId);
		gr_profile.query();
		
		while (gr_profile.next()) { 
			data.profileData.push({
				Level: gr_profile.getDisplayValue('level'),
				TotalPoints: gr_profile.getDisplayValue('total_points'),
			});
		}	

})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-04 16:54:37</sys_created_on>
        <sys_id>f22eeb0983965610cccd5d10feaad324</sys_id>
        <sys_mod_count>335</sys_mod_count>
        <sys_name>My Tasks - Technician</sys_name>
        <sys_package display_value="Automotive Service Management" source="x_1522458_automo_0">22ad9dee83861210cccd5d10feaad392</sys_package>
        <sys_policy/>
        <sys_scope display_value="Automotive Service Management">22ad9dee83861210cccd5d10feaad392</sys_scope>
        <sys_update_name>sp_widget_f22eeb0983965610cccd5d10feaad324</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-15 18:00:22</sys_updated_on>
        <template><![CDATA[<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="container">
    <div class="header-container">
      <h3 class="main">My Tasks</h3>
      <div class="filter-level-container">
        <div class="filter-container">
          <label for="stateFilter">Filter by State:</label>
          <select id="stateFilter" class="state-dropdown" ng-model="c.filterState" ng-change="c.onFilterChange()">
            <option value="">All States</option>
            <option ng-repeat="state in c.myStates" value="{{state}}">
              {{state}}
            </option>
          </select>
        </div>
        <div class="levelInfo">
          <div class="points" style="font-weight: bold; font-size: 20px; margin-bottom: 15px; color:{{c.getColorHexa()}}">
            {{c.data.profileData[0].TotalPoints}} / {{c.getEndIntervalOfLevel()}}
          </div>
          <div class="levelImg">
            <img class="Img" ng-src="{{c.data.images[c.getCurrentLevel()].src}}" alt="{{c.data.images[c.getCurrentLevel()].alt}}">
          </div>
        </div>
      </div>
    </div>

    <div ng-if="c.filteredTasks().length">
      <table class="styledTable">
        <thead>
          <tr>
            <th ng-click="c.sortColumn('number')">Task Number <i class="fa" ng-class="c.getSortIcon('number')"></i></th>
            <th ng-click="c.sortColumn('state')">State <i class="fa" ng-class="c.getSortIcon('state')"></i></th>
            <th ng-click="c.sortColumn('date')">Date <i class="fa" ng-class="c.getSortIcon('date')"></i></th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="task in c.paginatedTasks()">
            <td>
              <a href="technician_portal?id=asm_tasks_details&sys_id={{task.Id}}">
                {{task.number}}
              </a>
            </td>
            <td>
              <span class="status {{task.state.toLowerCase().replace(' ', '-')}}">
                {{task.state}}
              </span>
            </td>
            <td>{{task.date}}</td>
          </tr>
        </tbody>
      </table>

      <!-- Pagination Controls -->
      <div class="pagination">
        <button ng-disabled="c.currentPage === 0" ng-click="c.changePage(c.currentPage - 1)">Previous</button>
        <span>Page {{c.currentPage + 1}} of {{c.totalPages}}</span>
        <button ng-disabled="c.currentPage === c.totalPages - 1" ng-click="c.changePage(c.currentPage + 1)">Next</button>
      </div>

    </div>

    <div ng-if="!c.filteredTasks().length" class="noTasks">
      <i class="fas fa-tasks"></i>
      <p>No Tasks Yet</p>
    </div>
  </div>
</body>
</html>
]]></template>
    </sp_widget>
</record_update>
