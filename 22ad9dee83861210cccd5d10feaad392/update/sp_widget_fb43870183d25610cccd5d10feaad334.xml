<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function() {
  /* widget controller */
  var c = this;
	
	/*c.parseTimeRange = function(timeTange){
		
		times = timeTange.split(" - ");
		
		if (times.length === 2) {
    var from = times[0].trim(); // Get the "from" time
    var to = times[1].trim();   // Get the "to" time
    return { from, to };          // Return the "from" and "to" times as an object
  } else {
    // If the input is not in the correct format, return an error message
    console.error("Invalid time range format. Expected format: 'HH:mm - HH:mm'");
    return null;
  }
		
	
		
	}*/
	
	c.navigate=function(taskID){
		top.window.location = "/technician_portal?id=asm_tasks_details&sys_id="+taskID;
	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>/* General body styling */
body {
  font-family: "SourceSansPro", Helvetica, Arial, sans-serif;
  background-color: #ffffff;  /* White background for the page */
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  color: #333;
}

/* Container Styling */
.container {
margin-left:10%;
  width:115%;
  background-color: #ffffff;  /* Light gray background for cards */
  border-radius: 15px;
  padding-top:20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  margin-bottom:20px;
  height:100%  !important;
}

/* Header Styling */
.header {
  font-weight: 800;
  font-size: 2rem;
  color: #034078;
  text-align: center;
  width: 100%;
  padding-bottom: 10px;
  border-bottom: 2px solid #ecf0f1;
}

/* Card Container Styling */
.cardContainer {
  width: 90%;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  overflow-x: hidden;  /* Enable horizontal scrolling if content overflows */
  overflow-y: hidden;  /* Hide vertical overflow */
  padding: 10px;
}

/* Card Styling */
.cardItem {
  background-color: #ffffff;  /* White background for cards */
  margin: 10px 0;
  padding: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease-in-out;
}

.cardItem:hover {
  transform: scale(1.05);
}

/* Task Number Styling */
.taskNumber {
  font-weight: bold;
  font-size: 17px;
  margin-right: 15px;
  color: #2980b9;
}

/* Task Description Styling */
.shortDescContainer {
  flex-grow: 1;
  font-size: 14px;
  margin-right: 15px;
  color: #34495e;
}

/* Task State Styling */
.taskState {
  padding: 5px 10px;
  border-radius: 20px;
  font-size: 14px;
  color: white;
  background-color: #95a5a6;
}

.taskState.completed {
  background-color: #2ecc71; /* Green for completed tasks */
}

.taskState.inProgress {
  background-color: #f39c12; /* Yellow for in-progress tasks */
}

.taskState.pending {
  background-color: #e74c3c; /* Red for pending tasks */
}

/* Task Date Styling */
.taskDate {
  font-size: 12px;
  color: #7f8c8d;
}

/* No Tasks Available Styling */
.noTasks {
  text-align: center;
  font-size: 40px;
  font-weight: bold;
  color: #7f8c8d;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height:100%;
}

.noTasks i {
  font-size: 50px;
  color: #bdc3c7;
  margin-bottom: 20px;
}

.noTasks p {
  font-size: 18px;
  color: #7f8c8d;
}
.DateContainer{
	display: flex;
  justify-content: center;
  border-radius: 10px;
}
.taskFromDate{
  
  margin-left: 10px;
  margin-right: 10px;

}
.taskToDate{
  
  margin-left: 10px;
  margin-right: 10px;

}
/* Responsive adjustments */
@media (max-width: 600px) {
  .container {
    width: 90%;
  }

  .cardItem {
    width : 250px;
  }

  .taskNumber,
  .taskDate {
    font-size: 12px;
  }

  .shortDescContainer {
    font-size: 12px;
    margin-right: 0;
  }
}


.taskDetails {
  flex-grow: 1;
  display: flex;
  justify-content: flex-start; 
  align-items: center;
  margin-right: 15px;
  gap: 10px;
}
.state.scheduled{ 
  background-color: #a19a88; 
}

.state.in-progress {
  background-color: #29B6F6; 
} 
.state.done { 
  background-color: #FFB74D; 
} 
.state.closed-complete { 
  background-color: #4CAF50;
} 
.state.closed-incomplete {
  background-color: #E57373;
} 
.taskNumber {
  flex-basis: 110x; 
  text-align: left; 
}

.state {
  flex-basis: 120px;
  text-align: center;
  margin-right:40px;
  font-weight: bold;
  padding: 6px 8px;
  border-radius: 10px;
  color: #ffffff;
  text-transform: uppercase;
  font-size: 10px;
}

.desc {
  flex-grow: 1;
  white-space: nowrap; 
  overflow: hidden; 
  text-overflow: ellipsis;
  max-width: 200px;
  color: #34495e; 
  font-size: 14px;
}


.viewArrow {
  cursor: pointer;
  color: #2980b9; 
  font-size: 18px; 
  transition: color 0.3s ease;
}

.viewArrow:hover {
  color: #1f618d; 
}

.viewArrow:active {
  color: #154360;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>asm_task_cards</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Task Cards</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    if (!input) {
        data.tasks = []; // Initialize an empty array to hold the tasks

        // Query the 'x_1522458_automo_0_task' table
        var grTasks = new GlideRecordSecure('x_1522458_automo_0_task');
        grTasks.addActiveQuery(); // Filter for active tasks
			  grTasks.addEncodedQuery("assined_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe");
			  var today = new GlideDate();
        today.setDisplayValue(today.getDisplayValue()); // Ensure it's in the correct format

        // Filter tasks for today's date
        grTasks.addQuery('date', today); // Filter tasks by today's date
        grTasks.query();

        // Loop through the tasks and push required fields into the data array
        while (grTasks.next()) {
            data.tasks.push({
							  number: grTasks.getDisplayValue('number'),
                description: grTasks.getValue('short_description'), // Assuming 'short_description' holds task descr
                date: grTasks.getValue('date'),
                Id: grTasks.getDisplayValue('sys_id'), 
							  assigned_to: grTasks.getValue('assigned_to'),
								state:grTasks.getDisplayValue('state'),
            });
        }
    }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-04 13:47:21</sys_created_on>
        <sys_id>fb43870183d25610cccd5d10feaad334</sys_id>
        <sys_mod_count>275</sys_mod_count>
        <sys_name>Task Cards</sys_name>
        <sys_package display_value="Automotive Service Management" source="x_1522458_automo_0">22ad9dee83861210cccd5d10feaad392</sys_package>
        <sys_policy/>
        <sys_scope display_value="Automotive Service Management">22ad9dee83861210cccd5d10feaad392</sys_scope>
        <sys_update_name>sp_widget_fb43870183d25610cccd5d10feaad334</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-16 10:11:51</sys_updated_on>
        <template><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  </head>
  <body>
    <div class="container">
      <div class="header">Today's Tasks</div>
      <div class="cardContainer" ng-if="data.tasks.length > 0">
       <div class="cardItem" ng-repeat="task in data.tasks">
  <div class="taskDetails">
    <div class="taskNumber">
      <a href='/technician_portal?id=asm_tasks_details&sys_id={{task.Id}}'>
        {{task.number}}
      </a>
    </div>
    <div class="state {{task.state.toLowerCase().replace(' ', '-')}}">
        {{task.state}}
    </div>
    
     <div class="desc">
        {{task.description}}
    </div>
   
  
</div>    
          <div class="viewArrow" ng-click="c.navigate(task.Id)">
    <i class="fas fa-chevron-right"></i>
  </div>
        </div>
      </div>
      <div class="noTasks" ng-if="data.tasks.length === 0">
        <i class="fas fa-tasks"></i>
        <p>No Tasks Today</p>
      </div>
    </div>
    
  </body>
</html>
]]></template>
    </sp_widget>
</record_update>
