<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Default">505b00468322d610cccd5d10feaad39d</macroponent>
        <name>New client script 1</name>
        <preset/>
        <required_translations>[]</required_translations>
        <script><![CDATA[/**
* @param {params} params
* @param {api} params.api
* @param {any} params.event
* @param {any} params.imports
* @param {ApiHelpers} params.helpers
*/
async function handler({ api, event, helpers, imports }) {
    try {
        // Attempt to retrieve sysId from the api.data
        const pageSysId = api.data?.sysId;
        console.log(pageSysId);

        if (!pageSysId) {
            console.error('Page sysId property is not defined in api.data.');
            return;
        }

        // Query the customer feedback table for the record with matching request
        const response = await api.glideRecord('x_1522458_automo_0_customer_feedback')
            .where('request', pageSysId)
            .select();

        if (response.length > 0) {
            // Retrieve the sys_id of the matching record
            const recordSysId = response[0].sys_id;

            console.log('Retrieved record sys_id:', recordSysId);

            // Set the sys_id value into the client state parameter customerFeedbacksysId
            api.setState('customerFeedbacksysId', recordSysId);
            api.setState('feedbackExits', true);

            // Invoke the data resource look_up_a_single_record_customer_feedback
            const lookUpResponse = await api.invokeDataResource('look_up_a_single_record_customer_feedback', {
                sys_id: recordSysId,
            });

            console.log('Data resource response:', lookUpResponse);
        } else {
            console.warn('No record found with matching request field.');

            // Optionally clear the state if no record is found
            api.setState('customerFeedbacksysId', null);
            api.setState('feedbackExits', false);
        }
    } catch (error) {
        console.error('Error retrieving customer feedback record:', error);

        // Optionally clear the state in case of error
        api.setState('customerFeedbacksysId', null);
        api.setState('feedbackExits', false);
    }
}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-24 20:20:08</sys_created_on>
        <sys_id>dbd6eaab8322de10cccd5d10feaad396</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>New client script 1</sys_name>
        <sys_package display_value="Automotive Service Management" source="x_1522458_automo_0">22ad9dee83861210cccd5d10feaad392</sys_package>
        <sys_policy/>
        <sys_scope display_value="Automotive Service Management">22ad9dee83861210cccd5d10feaad392</sys_scope>
        <sys_update_name>sys_ux_client_script_dbd6eaab8322de10cccd5d10feaad396</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-15 16:38:46</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
