<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function () {
    var c = this;

    c.errors = {}; // Object to track field-specific error messages
    c.minDate = new Date().toISOString().split("T")[0]; // Set today's date as the minimum date
  c.data.selectedVehicle = c.selectedVehicle;
    c.clearError = function (field) {
        if (c.errors[field]) {
            delete c.errors[field]; // Remove the error message for the given field
        }
    };

    c.handleDateChange = function () {
    if (c.Date) {
        var selectedDate = new Date(c.Date);
        var dayOfWeek = selectedDate.getDay(); // Get the day of the week (0 = Sunday, 6 = Saturday)

        // Check if Sunday is selected
        if (dayOfWeek === 0) {
            c.errors.Date = "Sundays are not available.";
            c.Date = ""; // Clear the invalid date
        } else {
            c.clearError("Date"); // Clear the error when a valid date is selected
        }
    }
};
	
	 c.fetchLaborCost = function () {
        if (c.selectedVehicle) {
            // Find the selected vehicle's model ID
          var selectedVehicle = c.data.vehicleOptions.find(function(vehicle) {
    return vehicle.ID === c.selectedVehicle;
	});
	 if (selectedVehicle) {
                var selectedModelID = selectedVehicle.ModelID;

                // Send the selected model ID to the server
                c.server.get({
                    selectedVehicleModelID: selectedModelID
                }).then(function (response) {
                    c.laborCost = response.data.laborCost; // Update labor cost on the client
                    c.parts = response.data.parts || []; // Update parts on the client

                    // Calculate total parts cost
                    c.totalPartsCost = c.parts.reduce(function (sum, part) {
                        return sum + (part.price || 0);
                    }, 0);
									c.totalCost=parseInt(c.totalPartsCost,10)+parseInt(c.laborCost,10);
                });
            }
        } else {
            c.laborCost = null; // Clear labor cost if no vehicle is selected
            c.parts = []; // Clear parts
            c.totalPartsCost = 0; // Clear total parts cost
					c.totalCost=0;
        }
    };


    c.test = function () {
        // Reset previous errors
        c.errors = {};

        // Validation: Check for empty fields
        if (!c.Date) {
            c.errors.Date = "This field is mandatory.";
        }
        if (!c.selectedVehicle) {
            c.errors.selectedVehicle = "This field is mandatory.";
        }
       // if (!c.selectedType) {
         //   c.errors.selectedType = "This field is mandatory.";
        //}
			  if (!c.selectedSlot) {
            c.errors.selectedSlot = "This field is mandatory.";
        }
        
        //if (!c.description) {
          //  c.errors.description = "This field is mandatory.";
        //}

        // If any errors exist, stop submission
        if (Object.keys(c.errors).length > 0) {
            return; // Do not proceed further
        }

        // Store data
      
       c.data.selectedVehicle=c.selectedVehicle;
			  c.data.selectedSlot = c.selectedSlot;
			  var date = new Date(c.Date);
        // Extract year, month, and day components
        var year = date.getFullYear();
        var month = String(date.getMonth() + 1).padStart(2, "0"); // Months are zero-based
        var day = String(date.getDate()).padStart(2, "0");
        // Combine into YYYY-MM-DD format
        var formattedDate = year + "-" + month + "-" + day;
        c.Date = formattedDate;

        c.data.date = c.Date;
			  

        // Simulate server update
        c.server.update().then(function () {
            // Clear fields
            c.selectedVehicle = "";
            c.description = "";
            c.selectedType = "";
            c.Date = "";
					  c.data.selectedSlot = "";

            // Clear errors
            c.errors = {};

            // Show success popup
            document.getElementById("success-popup").style.display = "flex";
        });
    };
};]]></client_script>
        <controller_as>c</controller_as>
        <css>/* General Reset */
body {
    margin: 0;
    padding: 0;
    font-family: 'Lato', sans-serif;
    height:500px;
    background-color: #eff2f3
}




/* Global CSS, you probably don't need that */
 .info-icon {
            cursor: pointer;
            position: relative;
            margin-left: 10px;
        }

        .info-popup {
            display: none;
            position: absolute;
            top: -25px;
            left: 25px;
            background-color: #333;
            color: white;
            padding: 5px 10px;
            font-size: 12px;
            border-radius: 4px;
            z-index: 10;
            white-space: nowrap;
        }

        .info-icon:hover .info-popup {
            display: block;
        }

        /* Ensure label and icon are aligned horizontally */
       


/* Global CSS, you probably don't need that */


.container {
	font-family: 'Lato', sans-serif;
	width: 1000px;
	margin: 0 auto;
}

.wrapper {
	display: table-cell;
	height: 100px;
	vertical-align: middle;
}

.nav {
	margin-top: 40px;
}

.pull-right {
	float: right;
}

a, a:active {
	color: #333;
	text-decoration: none;
}

a:hover {
	color: #999;
}

/* Breadcrups CSS */

.arrow-steps .step {
	font-size: 16px;
  font-weight:600;
	text-align: center;
	color: #666;
	cursor: default;
	margin: 0 3px;
	padding: 10px 10px 10px 30px;
	min-width: 180px;
	float: left;
	position: relative;
	background-color: #d9e3f7;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none; 
  transition: background-color 0.2s ease;
}

.arrow-steps .step:after,
.arrow-steps .step:before {
	content: " ";
	position: absolute;
	top: 0;
	right: -17px;
	width: 0;
	height: 0;
	border-top: 19px solid transparent;
	border-bottom: 17px solid transparent;
	border-left: 17px solid #d9e3f7;	
	z-index: 2;
  transition: border-color 0.2s ease;
}

.arrow-steps .step:before {
	right: auto;
	left: 0;
	border-left: 17px solid #ffffff;	
	z-index: 0;
}

.arrow-steps .step:first-child:before {
	border: none;
}

.arrow-steps .step:first-child {
	border-top-left-radius: 1px;
	border-bottom-left-radius: 1px;
}

.arrow-steps .step span {
	position: relative;
}

.arrow-steps .step span:before {
	opacity: 0;
	content: "âœ”";
	position: absolute;
	top: -2px;
	left: -20px;
}

.arrow-steps .step.done span:before {
	opacity: 1;
	-webkit-transition: opacity 0.3s ease 0.5s;
	-moz-transition: opacity 0.3s ease 0.5s;
	-ms-transition: opacity 0.3s ease 0.5s;
	transition: opacity 0.3s ease 0.5s;
}

.arrow-steps .step.current {
	color: #fff;
	background-color: #23468c;
}

.arrow-steps .step.current:after {
	border-left: 17px solid #23468c;	
}
.arrow-steps .step.end:after {
	border-left: 0 solid #FFFFFF;	
}

/* Info Popup Styling */
.info-popup {
    display: none;
    background-color: #0056b3;
    color: white;
    padding: 12px;
    border-radius: 5px;
    font-size: 13px;
    margin-top: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Form Container */

/* General Form Styles */
.custom-form {
    max-width: 750px; /* Increased width for a slightly wider form */
    width: 90%; /* Ensure it's not too wide even on larger screens */
    margin: 30px auto;
    padding: 20px;
    background: linear-gradient(145deg, #f4f9fc, #d9e7f4);
    border-radius: 12px;
    box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.2), -6px -6px 12px rgba(255, 255, 255, 0.5);
}

/* Form Heading */
.custom-form h2 {
    text-align: center;
    margin-bottom: 25px;
    font-size: 2.7rem;
    font-weight: 700;
    color: #333;
    text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
}

.custom-form .highlight {
    color: #0056b3;
}

.custom-form .alternate {
    color: #007bff;
}

/* Grid Layout for Form */
.form-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 20px; /* Space between grid items */
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    font-weight: 700;
    color: #555;
    margin-bottom: 6px;
}

input,
select,
textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1.7rem;
    color: #333;
    transition: all 0.2s ease-in-out;
}

/* Placeholder Text Styling */
input::placeholder,
textarea::placeholder {
    font-size: 1.7rem; /* Larger placeholder text */
    color: #999; /* Placeholder text color */
    font-weight: 500; /* Slightly bolder placeholder */
}

input:focus,
select:focus,
textarea:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    outline: none;
}

/* Full Width for Description */
textarea {
    resize: none;
    height: 100px;
}

/* Submit Button */
.form-submit {
    text-align: center;
    margin-top: 20px;
    
}

button {
    background-color: #007bff;
    color: white;
    padding: 12px 25px;
    border: none;
    border-radius: 8px;
    font-size: 1.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

button:hover {
    background-color: #0056b3;
    transform: translateY(-2px);
}




/* Responsive Design */
@media (max-width: 768px) {
    .form-grid {
        grid-template-columns: 1fr; /* Stack fields vertically */
    }

    .custom-form {
        width: 90%;
        padding: 15px;
    }

    .custom-form h2 {
        font-size: 1.8rem;
    }

    button {
        width: 100%;
        padding: 10px;
    }
}

@media (max-width: 480px) {
    label {
        font-size: 1.4rem;
    }

    input,
    select,
    textarea {
        font-size: 1.4rem;
    }
}


/* Success Popup Styles */
.popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: none; /* Initially hidden */
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Ensure it appears on top */
}

.popup-content {
    background-color: #fff;
    padding: 30px;
    border-radius: 15px;
    text-align: center;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    max-width: 400px;
    width: 100%;
}

.popup-content i {
    font-size: 5rem;
    color: #28a745; /* Green color for success */
    margin-bottom: 15px;
}

.popup-content h2 {
    font-size: 1.8rem;
    color: #333;
    margin-bottom: 10px;
}

.popup-content p {
    font-size: 1.2rem;
    color: #666;
    margin-bottom: 20px;
}

.popup-content .close-btn {
    background-color: #28a745;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
    display: block; /* Ensures it takes up its own line */
    margin: 0 auto; /* Centers horizontally */
}

.popup-content .close-btn:hover {
    background-color: #218838;
}

.error-message {
    color: red;
    font-size: 1em;
    font-weight: 600;
    margin-top: 4px;
    display: block;
}
.star{
color:red;
   font-size: 1em;
    font-weight: 600;
}
/* Read-Only Fields */
.read-only-field {
    padding: 10px;
    border-radius: 8px;
    //background: #f4f9fc;
    //box-shadow: inset 2px 2px 6px rgba(0, 0, 0, 0.1), inset -2px -2px 6px rgba(255, 255, 255, 0.7);
    font-size: 1.7rem;
    color: #333;
    word-break: break-word;
    font-family: 'Roboto', sans-serif;
}

/* Multi-line Read-Only Fields */
.read-only-field.multiline {
    min-height: 100px;
    line-height: 1.5;
    overflow-y: auto;
}


/* Parts Table */

.parts-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.parts-table th, .parts-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
}

.parts-table th {
    background-color: #007bff;
    color: white;
    font-weight: bold;
}

.parts-table tbody tr {
    background-color: #f4f9fc;
  	text-align:center;
}

.parts-table tfoot td {
    font-weight: bold;
  		font-size:1.3em;
    background-color: #f4f9fc;
  
}

.money-format {
    font-weight: bold;
    font-size: 1.6rem; /* Adjust size as needed */
      color: #555; 
    white-space: nowrap; /* Ensures the price and "EGP" stay on the same line */
}

.money-format::after {
    content: " EGP"; /* Append "EGP" to the price */
    font-weight: Bold; /* Optional: Make "EGP" less prominent than the price */
    color: #555; /* Optional: Use a subtler color for "EGP" */
    margin-left: 2px; /* Add a slight gap before "EGP" */
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>new_standard_service_form</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>New Standard Service form</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
    // Object to hold the data
    data.vehicleOptions = [];
	
	 data.sys_id = $sp.getParameter('sys_id'); // Get sys_id from URL parameters

	 if (data.sys_id) {
        var gr = new GlideRecord('x_1522458_automo_0_standard_services'); // Table name
        if (gr.get(data.sys_id)) { // Fetch the service request record
            data.request = {
                
                type: gr.getDisplayValue('type'),
                title: gr.getDisplayValue('title'),
								image: gr.getValue('image'),
								department:gr.getValue('department'),
                description: gr.getDisplayValue('description')
					
            };

         } else {
            data.error = "Request not found.";
        }
    } else {
        data.error = "No request ID provided.";
    }

	
    // GlideRecord to query the Vehicle table
    var vehicleGR = new GlideRecordSecure('x_1522458_automo_0_vehicle');
	  vehicleGR.addActiveQuery();
		vehicleGR.addEncodedQuery("ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe");
    vehicleGR.query();

    while (vehicleGR.next()) {
        // Push each vehicle into the vehicleOptions array
        data.vehicleOptions.push({
            ID: vehicleGR.getDisplayValue('sys_id'), // sys_id of the vehicle
						ModelID:vehicleGR.getValue('mode0'),
            Model: vehicleGR.getDisplayValue('mode0')
					
        });
    }
	
	
	// Function to fetch labor cost based on vehicle model
    if (input && input.selectedVehicleModelID) {
        var laborCostGR = new GlideRecord('x_1522458_automo_0_standard_service_model');
        laborCostGR.addQuery('model', input.selectedVehicleModelID); // Match the selected model
        laborCostGR.addQuery('standard_service', data.sys_id); // Match the current standard service
        laborCostGR.query();

        if (laborCostGR.next()) {
            data.laborCost = laborCostGR.getValue('labor_cost'); // Get the labor cost

            // Fetch associated parts for the selected model
            var parts = [];
            var partsList = laborCostGR.parts; // Assuming 'parts' is the reference list field
            if (partsList) {
						var partIDs = partsList.split(','); // Convert the comma-separated string into an array
						partIDs.forEach(function (partID) {
								var partGR = new GlideRecord('x_1522458_automo_0_parts');
								if (partGR.get(partID.trim())) { // Ensure partID is trimmed of extra spaces
										parts.push({
												name: partGR.getValue('part_name'),
												price: parseFloat(partGR.getValue('price')) || 0
										});
								}
						});
				}
            data.parts = parts;
        } else {
            data.laborCost = "No labor cost found for this model.";
            data.parts = [];
        }
    }
			
       
	
	
	
	
	
	/////////////Insert
	
	
	  var gr1 = new GlideRecord("x_1522458_automo_0_service_request");
	  gr1.initialize();
	  if(input&&input.date&&input.selectedSlot&&input.selectedVehicle){
		gr1.setValue("vehicle" , input.selectedVehicle);
		gr1.setValue("type" , data.request.type);
	  gr1.setValue("description", data.request.description);
	  gr1.setValue("inspection_date" , input.date);
		gr1.setValue("desired_time" ,input.selectedSlot);
		gr1.setValue("standard", true);
		gr1.setValue("state", 10)	;			/// why it's not working.
		gr1.setValue("department",data.request.department);
	  gr1.insert();
		
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 09:47:37</sys_created_on>
        <sys_id>935f897183f2d210cccd5d10feaad31d</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>New Standard Service form</sys_name>
        <sys_package display_value="Automotive Service Management" source="x_1522458_automo_0">22ad9dee83861210cccd5d10feaad392</sys_package>
        <sys_policy/>
        <sys_scope display_value="Automotive Service Management">22ad9dee83861210cccd5d10feaad392</sys_scope>
        <sys_update_name>sp_widget_935f897183f2d210cccd5d10feaad31d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-02 09:50:23</sys_updated_on>
        <template><![CDATA[HTML Template :>>>>>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Request</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500;700&display=swap" rel="stylesheet">
     <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
  
   

    <!-- Form Section -->
 <div class="custom-form">
    <h2><span class="highlight">{{ data.request.title}}</span></h2>
    <form>
        <div class="form-grid">
           <!-- Description -->
          <div class="form-group">
            	<div class="read-only-field multiline">{{ data.request.description }}</div>
        		</div>
            <!-- Vehicle -->
            <div class="form-group">
                <label for="vehicle">Vehicle <span class="star">*</span></label>
                <select id="vehicle" ng-model="c.selectedVehicle" ng-change="c.fetchLaborCost(); c.clearError('selectedVehicle')">
                       
                    <option value="">-- Select Vehicle --</option>
                    <option ng-repeat="vehicle in c.data.vehicleOptions" value="{{vehicle.ID}}">
                        {{vehicle.Model}}
                    </option>
                </select>
                <span class="error-message" ng-show="c.errors.selectedVehicle">{{c.errors.selectedVehicle}}</span>
            </div>

          

            <!--  Date -->
           
            <div class="form-group">
              <label for="Date">Date <span class="star">*</span>
                 <span class="info-icon">
                    <i class="fa fa-info-circle"></i>
                 <span class="info-popup">Choose a date for the vehicle inspection. <p>Sundays are not available.</p></span>
                 </span>
             </label>
             <input
               type="date"
               id="Date"
               ng-model="c.Date"
               ng-change="c.handleDateChange()"
               min="{{c.minDate}}"
              />
             <!-- Single error message handling -->
             <span class="error-message" ng-show="c.errors.inspectionDate">{{c.errors.inspectionDate}}</span>
           </div>



            <!-- Desired Time -->
            <div class="form-group">
                <label for="slots">Desired Time <span class="star">*</span></label>
                <select id="slots" ng-model="c.selectedSlot" ng-change="c.clearError('selectedSlot')">
                    <option value="">-- Select Time --</option>
                    <option value="Morning (9 AM - 12 PM)">Morning (9 AM - 12 PM)</option>
                    <option value="Afternoon (1 PM - 4 PM)">Afternoon (1 PM - 4 PM)</option>
                </select>
                <span class="error-message" ng-show="c.errors.selectedSlot">{{c.errors.selectedSlot}}</span>
             </div>
           </div>
             <!-- Labor Cost -->
            <div class="form-group">
                <label for="type">Labor Cost
                  <div class="read-only-field money-format"> {{c.laborCost || 'Select a vehicle to view cost.'}}</div>
                </label>
      			</div>
               
          
            <div class="form-group">
                <label for="spare-parts">Spare Parts</label>
                <table class="parts-table">
                    <thead>
                        <tr>
                            <th>Part Name</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr ng-repeat="part in c.parts">
                            <td>{{part.name}}</td>
                            <td>{{part.price}}</td>
                        </tr>
                    </tbody>
                   
                    <tfoot>
                        <tr>
                            <td><strong>Total Spare Parts Cost</strong></td>
                            <td><strong>{{c.totalPartsCost | number:2}}</strong></td>
                        </tr>
                    </tfoot>
                    
                </table>
            </div>

                  <!-- Total Cost -->
            <div class="form-group">
                <label for="type">Total Cost
                  
                </label>
              <div class="read-only-field money-format">{{c.totalCost}}</div>
 					</div>
        <!-- Full Width Description -->
       

        <!-- Submit Button -->
        <div class="form-submit">
            <button type="submit" ng-click="c.test()">Request the Service</button>
        </div>


  
  <!-- Popup Modal -->
<div id="success-popup" class="popup">
    <div class="popup-content">
        <i class="fas fa-check-circle"></i>
        <h2>Request Submitted Successfully</h2>
        <p>Your service request has been submitted successfully.</p>
        <button class="close-btn" onclick="closePopup()">OK</button>
    </div>
</div> 	
   </form>
  </div>

    <script>
        // Toggle info popup
        function toggleInfo() {
            var infoPopup = document.getElementById("info-popup");
            infoPopup.style.display = infoPopup.style.display === "block" ? "none" : "block";
        }
        function closePopup() {
            document.getElementById("success-popup").style.display = "none";
            window.location.href = "https://dev231407.service-now.com/customer_portal?id=customer_homepage"; 
        }
    </script>
</body>
</html> ]]></template>
    </sp_widget>
</record_update>
