<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function () {
  var c = this;

  c.navigate = function () {
    top.window.location =
      "/customer_portal?id=asm_request_service%20&table=x_1522458_automo_0_service_request&view=Customer_view";
  };

  c.phases = {
    "INSPECTION PHASE": ["Waiting Inspection", "Under Inspection", "Inspected"],
    "OFFER PHASE": ["Waiting Approval", "Offer Approved"],
    "REPAIRING PHASE": ["Work in Progress"],
    "SERVICE COMPLETE": ["Closed Complete"],
    "SERVICE INCOMPLETE": ["Closed Incomplete"],
  };

  c.filterPhase = "";  // Filter state initialized
  c.sortColumnKey = "";
  c.sortAscending = true;

  c.currentPage = 1; // Initialize current page
  c.itemsPerPage = 6; // Number of items per page

  c.getDisplayState = function (state) {
    if (c.phases["INSPECTION PHASE"].includes(state)) {
      return "INSPECTION PHASE";
    }
    if (c.phases["OFFER PHASE"].includes(state)) {
      return "OFFER PHASE";
    }
    if (c.phases["REPAIRING PHASE"].includes(state)) {
      return "REPAIRING PHASE";
    }
    if (c.phases["SERVICE COMPLETE"].includes(state)) {
      return "SERVICE COMPLETE";
    }
    if (c.phases["SERVICE INCOMPLETE"].includes(state)) {
      return "SERVICE INCOMPLETE";
    }
    return state;
  };

  c.filteredRequests = function () {
    var requests = c.data.requests;
    if (c.filterPhase) {
      var validStates = c.phases[c.filterPhase] || [];
      requests = requests.filter(function (request) {
        return validStates.includes(request.State);
      });
    }

    if (c.sortColumnKey) {
      requests = requests.sort(function (a, b) {
        var valA = a[c.sortColumnKey] || "";
        var valB = b[c.sortColumnKey] || "";

        if (c.sortColumnKey === "State") {
          valA = c.getDisplayState(valA);
          valB = c.getDisplayState(valB);
        }

        if (c.sortColumnKey === "CreatedOn") {
          valA = new Date(valA);
          valB = new Date(valB);
        }

        if (valA < valB) return c.sortAscending ? -1 : 1;
        if (valA > valB) return c.sortAscending ? 1 : -1;
        return 0;
      });
    }

    return requests;
  };

  c.paginatedRequests = function () {
    var startIndex = (c.currentPage - 1) * c.itemsPerPage;
    var endIndex = startIndex + c.itemsPerPage;
    return c.filteredRequests().slice(startIndex, endIndex);
  };

  c.previousPage = function () {
    if (c.currentPage > 1) c.currentPage--;
  };

  c.nextPage = function () {
    if (c.currentPage < c.totalPages) c.currentPage++;
  };

  // Reset pagination to first page when filter changes
  c.onFilterChange = function () {
    c.currentPage = 1;
  };

  Object.defineProperty(c, "totalPages", {
    get: function () {
      return Math.ceil(c.filteredRequests().length / c.itemsPerPage);
    },
  });

  c.sortColumn = function (key) {
    if (c.sortColumnKey === key) {
      c.sortAscending = !c.sortAscending;
    } else {
      c.sortColumnKey = key;
      c.sortAscending = true;
    }
  };

  c.data.requests.sort(function (a, b) {
    return new Date(b.CreatedOn) - new Date(a.CreatedOn);
  });

  c.myPhases = Object.keys(c.phases);
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.Container{
  position: relative;
  padding-bottom:70px;
}
.tableContainer {
  font-family: "Roboto", sans-serif;
  margin: 20px;
  display: block;
}
.header-container h3{
   font-family: "Roboto", sans-serif;
   font-size: 2.4rem;
   font-weight: bold;
}
label {
  margin: 10px 0;
}

select {
  padding: 5px;
  margin: 5px 0;
}


.filter-container label {
  font-size: 14px;
  color: #333;
  font-weight: bold;
}

.filter-container select {
  padding: 8px 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
  color: #555;
  background-color: #fff;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: border-color 0.3s ease;
}

.filter-container select:hover {
  cursor: pointer;
}


#new {
  font-weight: bold;
  margin-left: 10px; 
  padding: 8px 15px;
  background-color: #034078; 
  color: #ffffff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

#new:hover {
  background-color: #001F54; 
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

h3{
  color:  #034078; 
   
}

table {
  margin-top:10px;
  width: 100%;
  border-collapse: collapse;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  background-color: #FFFFFF;
  border-radius: 8px;
}

thead {
  background-color: #034078; 
  color: #ffffff;
  text-transform: uppercase;
  font-size: 12px;
}

th, td {
  padding: 12px 16px;
  text-align: center;
  vertical-align: middle; 
}

th:first-child {
  border-top-left-radius: 8px;
}

th:last-child {
  border-top-right-radius: 8px;
}

tbody tr {
  border-bottom: 1px solid #E0E0E0;
}

tbody tr:hover {
  background-color: #F9FAFC; 
}

a {
  color: #4A90E2; 
  text-decoration: none;
  font-weight: 600;
}

a:hover {
  text-decoration: underline;
}

.status {
  
  padding: 6px 8px;
  border-radius: 10px;
  color: #ffffff;
  text-transform: uppercase;
  font-size: 12px;
  font-weight: 600;
  
}


.status.work-in-progress {
  background-color: #04e4d8; 
} 
.status.closed-complete { 
  background-color: #4CAF50; 
} 
.status.closed-incomplete { 
  background-color: #ff0000;
} 
.status.inspection-phase {
    background-color:#747880; 
    color: white;
    padding: 5px 10px; 
    border-radius: 5px; 
   
  }

 .status.repairing-phase {
    background-color: #0a62f0; 
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    
  }
.status.offer-phase {
    background-color:#faae0a;
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
}
.status.service-complete {
    background-color: #28a745; /* Green */
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
  }

.status.service-incomplete {
    background-color: red; /* Red */
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    
}

tbody td {
  border-radius: 0;
}


.pagination-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;
}

.pagination-container button {
  padding: 8px 15px;
  background-color: #034078;
  color: #ffffff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

.pagination-container button:hover {
  background-color: #001F54;
}

.pagination-container button:disabled {
  background-color: #e0e0e0;
  color: #a0a0a0;
  cursor: not-allowed;
}

.pagination-container span {
  font-size: 16px;
  font-weight: bold;
  color: #333;
}



</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>asm_list</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>ASM List</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	
	if(!input){
		data.requests=[];
		var grRequests = new GlideRecordSecure('x_1522458_automo_0_service_request');
		//grRequests.addActiveQuery();
		grRequests.addEncodedQuery("opened_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe");
		//grRequests.addQuery("sys_created_by" , "customer.example");
		grRequests.query();
		
		while (grRequests.next()) { 
			data.requests.push({
				RequestNumber: grRequests.getDisplayValue('number'),
				Type: grRequests.getDisplayValue('type'),
				State: grRequests.getDisplayValue('state'),
				Creator: grRequests.getDisplayValue('opened_by'),
				ID : grRequests.getDisplayValue('sys_id'),
				CreatedOn: grRequests.getValue('sys_created_on')
			});
		}	
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-01 18:54:29</sys_created_on>
        <sys_id>a5dc2cd8831e1210cccd5d10feaad351</sys_id>
        <sys_mod_count>411</sys_mod_count>
        <sys_name>ASM List</sys_name>
        <sys_package display_value="Automotive Service Management" source="x_1522458_automo_0">22ad9dee83861210cccd5d10feaad392</sys_package>
        <sys_policy/>
        <sys_scope display_value="Automotive Service Management">22ad9dee83861210cccd5d10feaad392</sys_scope>
        <sys_update_name>sp_widget_a5dc2cd8831e1210cccd5d10feaad351</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-15 17:58:57</sys_updated_on>
        <template><![CDATA[<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<div class="Container">
  <div class="tableContainer">
    <div class="header-container">
      <h3>My Requests</h3>
      <div class="filter-container">
        <label for="phaseFilter">Filter by Phase:</label>
        <select id="phaseFilter" class="state-dropdown" ng-model="c.filterPhase" ng-change="c.onFilterChange()">
          <option value="">All Phases</option>
          <option ng-repeat="phase in c.myPhases" value="{{phase}}">
            {{phase}}
          </option>
        </select>
        <button id="new" ng-click="c.navigate()">New</button>
      </div>
    </div>

    <table>
      <thead>
        <tr class="headRow">
          <th ng-click="c.sortColumn('RequestNumber')">
            Request Number 
            <i class="fas" ng-class="{'fa-sort-up': c.sortColumnKey === 'RequestNumber' && c.sortAscending, 'fa-sort-down': c.sortColumnKey === 'RequestNumber' && !c.sortAscending}"></i>
          </th>
          <th ng-click="c.sortColumn('Type')">
            Type 
            <i class="fas" ng-class="{'fa-sort-up': c.sortColumnKey === 'Type' && c.sortAscending, 'fa-sort-down': c.sortColumnKey === 'Type' && !c.sortAscending}"></i>
          </th>
          <th ng-click="c.sortColumn('State')">
            State 
            <i class="fas" ng-class="{'fa-sort-up': c.sortColumnKey === 'State' && c.sortAscending, 'fa-sort-down': c.sortColumnKey === 'State' && !c.sortAscending}"></i>
          </th>
          <th ng-click="c.sortColumn('CreatedOn')">
            Created At 
            <i class="fas" ng-class="{'fa-sort-up': c.sortColumnKey === 'CreatedOn' && c.sortAscending, 'fa-sort-down': c.sortColumnKey === 'CreatedOn' && !c.sortAscending}"></i>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr ng-if="!c.paginatedRequests().length">
          <td colspan="4" style="text-align: center; font-style: italic; color: #888;font-weight:bold;font-size:17px">
            <i class="fas fa-tasks"></i>
            No data available to display
          </td>
        </tr>
        <tr class="item" ng-repeat="s in c.paginatedRequests()">
          <td>
            <a href="customer_portal?id=asm_request_details&sys_id={{s.ID}}">
              {{s.RequestNumber}}
            </a>
          </td>
          <td>{{s.Type}}</td>
          <td>
            <span
              class="status 
                {{c.getDisplayState(s.State) === 'INSPECTION PHASE' ? 'inspection-phase' : 
                c.getDisplayState(s.State) === 'OFFER PHASE' ? 'offer-phase' : 
                c.getDisplayState(s.State) === 'REPAIRING PHASE' ? 'repairing-phase' : 
                c.getDisplayState(s.State) === 'SERVICE COMPLETE' ? 'service-complete' : 
                c.getDisplayState(s.State) === 'SERVICE INCOMPLETE' ? 'service-incomplete' : 
                s.State.toLowerCase().replace(' ', '-').replace(' ', '-')}}"
            >
              {{c.getDisplayState(s.State)}}
            </span>
          </td>
          <td>
            {{s.CreatedOn.split(' ')[0]}}
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="pagination-container">
      <button ng-click="c.previousPage()" ng-disabled="c.currentPage === 1">Previous</button>
      <span>Page {{c.currentPage}} of {{c.totalPages}}</span>
      <button ng-click="c.nextPage()" ng-disabled="c.currentPage === c.totalPages">Next</button>
    </div>
  </div>
</div> 
]]></template>
    </sp_widget>
</record_update>
