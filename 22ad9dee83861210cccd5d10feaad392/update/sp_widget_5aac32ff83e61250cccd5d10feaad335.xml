<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function(spUtil, $scope, $timeout) {
	var c = this;

	// Ensure that the created property is treated as a string and can be parsed into a Date
	
	c.data.Notification.sort(function (a, b) {
    return new Date(b.created) - new Date(a.created);
  });




	// Open the chat
	c.openChat = function open() {
		document.getElementById('chat-container').classList.remove('hidden');
	};

	// Close the chat
	c.closeChat = function close() {
		document.getElementById('chat-container').classList.add('hidden');
	};

	// Send a message
	c.sendMessage = function send() {
		var input = document.getElementById('chat-input');
		var message = input.value.trim();
		if (message) {
			var chatBody = document.getElementById('chat-body');
			var new_m = document.createElement('p');
			new_m.textContent = message;
			chatBody.appendChild(new_m);
			input.value = '';
			chatBody.scrollTop = chatBody.scrollHeight;
		}
	};

	// Get references to button and sidebar
	var toggleButton = document.getElementById('toggleButton');
	var sidebar = document.getElementById('sidebar');

	// Function to open the sidebar
	function openSidebar() {
		sidebar.classList.add('open');
	}

	// Function to close the sidebar
	function closeSidebar() {
		sidebar.classList.remove('open');
	}

	// Event listeners
	toggleButton.addEventListener('click', openSidebar);

	// Close sidebar when clicking anywhere outside
	document.addEventListener('click', function(event) {
		if (!sidebar.contains(event.target) && !toggleButton.contains(event.target)) {
			closeSidebar();
		}
	});

	// Redirect functions
	c.redirectRequest = function (Reqid, NotId) {
		
		
		c.data.ID = NotId;
		//alert("Before Update");
		c.server.update();
		//alert("After Update");
		
		top.window.location = "/customer_portal?id=asm_request_details&sys_id=" + Reqid;
	};

	c.redirectOffer = function (OffId, NotId) {
		
		c.data.ID = NotId;
		//alert("Before Update");
		c.server.update();
		//alert("After Update");
		
		top.window.location = "/customer_portal?id=asm_current_offer";
		
	};
	
	
	
	
	
	 c.currentUser = c.data.currentUser;
  c.newMessageCount = localStorage.getItem('newMessageCount') ? parseInt(localStorage.getItem('newMessageCount')) : 0; // Load counter from localStorage if available
  c.audio = new Audio('https://directory.audio/sound-effects/interface-ui/34634-new-notification-7'); // Path to the notification sound

  // Open the chat window
  c.openChat = function() {
    document.getElementById('chat-container').classList.remove('hidden');
    c.newMessageCount = 0; // Reset the counter when the chat is opened
    localStorage.setItem('newMessageCount', c.newMessageCount); // Store the reset count in localStorage
    $timeout(function() {
      c.scrollToBottom(); // Scroll to bottom when chat window opens
    }, 100);
  };

  // Close the chat window
  c.closeChat = function() {
    document.getElementById('chat-container').classList.add('hidden');
  };

  // Watch for changes in the chat messages
  spUtil.recordWatch($scope, "x_1522458_automo_0_chating", "", function(name, data) {
    spUtil.update($scope);

    var receiver = name.data.record.receiver.value;
    var sender = name.data.record.sender.value;
    console.log(name);
    // Set the receiver and sender values
    c.receiver = receiver;
    c.sender = sender;

    console.log("Receiver:", c.receiver);
    console.log("Sender:", c.sender);

    // If the current user is the receiver, increment the message count
    if (c.currentUser === receiver) {
      c.newMessageCount++;
      localStorage.setItem('newMessageCount', c.newMessageCount); // Store the updated count in localStorage
      c.audio.play(); // Play sound when a new message is received
    }

    // Ensure scrolling to the bottom after a new message is received
    $timeout(function() {
      c.scrollToBottom();
    }, 100);
  });

  // Function to send a new message
  c.sendMessage = function() {
    if (!c.data.message || c.data.message.trim() === "") {
      return; // Do not send empty messages
    }

    // Send the message to the server
    c.server.update().then(function(response) {
      c.data.message = ""; // Clear the input field after sending
    });
  };

  // Check if the Enter key is pressed
  c.checkEnterKey = function(event) {
    if (event.key === "Enter" || event.keyCode === 13) {
      c.sendMessage(); // Trigger the send message function
      event.preventDefault(); // Prevent default Enter key behavior (e.g., form submission)
    }
  };

  // Function to scroll to the bottom of the chat body
  c.scrollToBottom = function() {
    var chatBody = document.getElementById('chat-body');
    chatBody.scrollTop = chatBody.scrollHeight;
  };
	
	
	
	
	
	
	
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Container for both notification and chatbot icons */
.homepage-icons {
    position: fixed;
    bottom: 20px;
    right: 30px;
    z-index: 9999;
    display: flex;
    flex-direction: column; /* Stack vertically */
    align-items: center;
}

/* Notification Button Styles */
.notification-container {
    margin-bottom: 10px; /* Space between notification and chatbot button */
}

.notification-button {
    position: relative;
    padding: 20px;
    background-color: #0A1128;
    color: white;
    border: none;
    border-radius: 50%;
    font-size: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background-color: red;
    color: white;
    font-size: 12px;
    padding: 5px 8px;
    border-radius: 50%;
    font-weight: bold;
}

/* Chatbot Button Styles */
.chatbot-button {
    background-color: #FF8833;  
    color: #ffffff;
    border: none;
    width: 65px;
    height: 65px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    font-size: 30px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

/* Hover effect for chatbot button */
.chatbot-button:hover {
    background-color: #FF7043;
}

/* Chat container styles */
#chat-container {
    position: fixed;
    bottom: 90px; /* Position below the icons */
    right: 30px;
    width: 400px; 
    z-index: 9999;
}

/* Chatbox styling */
.chat-header {
    background-color: #FF8833;
    color: #ffffff;
    font-weight: bold;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 16px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
}

.chat-body {
    height: 300px;
    padding: 10px;
    overflow-y: auto;
    background-color: #f9f9f9;
}

.chat-footer {
    display: flex;
    padding: 10px;
    background-color: #ffffff;
    margin-bottom: 10px;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
}

.chat-footer input {
    flex: 1;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 10px;
    margin-right: 5px;
}

.chat-footer button {
    background-color: #FF8833;
    color: #ffffff;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 10px;
    font-weight: bold;
}

.chat-footer button:hover {
    background-color: #cc4e20;
}

/* Hidden class for chat */
.hidden {
    display: none;
}


/* Sidebar styling */
.sidebar {
    height: 100vh;  /* Use full viewport height to make the sidebar reach the bottom of the page */
    width: 0;
    position: fixed;
    top: 0;
    right: 0; /* Align sidebar to the right */
    overflow: hidden; /* Hide default scrollbars */
    transition: 0.3s ease;
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: flex-start; /* Align items at the top */
    padding-top: 60px; /* Space for the close button */
  	padding-bottom: 20px;
    background-color: #1d1c1c;
  z-index: 10000;
  	

}

/* Sidebar content scrollable container */
.sidebar .content {
    padding: 20px;
    height: calc(100vh - 60px); /* Adjust height to fit the entire page */
    overflow-y: auto; /* Enable vertical scrolling */
    overflow-x: hidden; /* Disable horizontal scrolling */
    -ms-overflow-style: none; /* Hide scrollbar for IE */
    scrollbar-width: none; /* Hide scrollbar for Firefox */
}


/* Hide the scrollbar for WebKit browsers like Chrome/Safari */
.sidebar .content::-webkit-scrollbar {
    display: none;
}

/* Sidebar content alignment */
.sidebar h2, .sidebar p {
    margin: 0;
    font-size: 18px;
}

/* Close button inside sidebar */
#closeButton {
    font-size: 16px;
    padding: 10px 15px;
    cursor: pointer;
    background-color: #444;
    color: white;
    border: none;
    margin: 10px;
}

/* Adjust button and content for smoother interaction */
.sidebar h2 {
    font-size: 24px;
    margin-bottom: 20px;
    text-align: center;
}

.sidebar p {
    font-size: 16px;
    margin-bottom: 10px;
    text-align: left;
}

/* When sidebar is open, adjust width */
.sidebar.open {
    width: 300px; /* Increased width for better alignment */
}

/* Card styles inside sidebar */
.card {
    background-color: #333;
    margin: 10px;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}

.card h3 {
    font-size: 18px;
    margin-bottom: 10px;
}

.card p {
    font-size: 14px;
    color: #ccc;
}

/* Hover effect on card */
.card:hover {
    transform: scale(1.1); /* Increase size */
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); /* Add shadow for emphasis */
}

.seen-card {
  	opacity: 0.6;
}


.chatbot-button {
  background-color: #1282A2;  
  color:#ffffff;
  border: none;
  width: 65px;
  height: 65px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  font-size: 30px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  position: fixed; 
  bottom: 20px;
  right: 30px;
  z-index: 9999; 
}
.chatbot-button:hover {
  background-color:#034078;
}
.notification-counter {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: red;
  color: white;
  font-size: 12px;
  font-weight: bold;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
}

.manager-photo {
  width: 40px;
  height: 40px;
  border-radius: 50%; /* Circular shape */
  object-fit: cover; /* Ensures the image fits well */
  border: 2px solid #fff; /* Optional: Add a border */
}

.Container{
  position: relative;
  padding-bottom:70px;
  width: 100%;
}

.chat-header {
  background-color: #1282A2;
  color: #ffffff;
  font-weight:bold;
  padding: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 16px;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}
.chat-body {
  height: 700px;
  padding: 10px;
  background-color: #f9f9f9;
  overflow: hidden; /* Hide the scrollbar */
}
.form-group {
  display: flex;
  align-items: center;
  padding: 10px;
  background-color: #ffffff;
  margin-bottom: 5px;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
}

.form-group input[type="text"] {
  flex: 3; /* Gives the input field more space */
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 10px;
  margin-right: 10px; /* Adds spacing between the input and button */
  font-size: 14px;
}

input[type="submit"] {
  flex: 1; /* Keeps the button smaller */
  background-color: #1282A2;
  color: #ffffff;
  border: none;
  
  cursor: pointer;
  border-radius: 10px;
  font-weight: bold;
  text-align: center;
  height:36px;
}

input[type="submit"]:hover {
  background-color: #034078;
}

.hidden {
  display: none;
}

.icon{
  transition: transform 0.3s ease, color 0.3s ease; 
}

@keyframes wiggle {
  0% {
    transform: rotate(-3deg);
  }
  20% {
    transform: rotate(20deg);
  }
  40% {
    transform: rotate(-15deg);
  }
  60% {
    transform: rotate(5deg);
  }
  90% {
    transform: rotate(-1deg);
  }
  100% {
    transform: rotate(0);
  }
}
.icon {
  animation: 1s wiggle ease infinite;
}

#chat-container {
  position: fixed; 
  bottom: 90px;
  right: 30px;
  width: 400px; 
  z-index: 9999; 
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
}

/* Style for chat messages */
.receiver-message {
  max-width: 50%;
  padding: 8px;
  padding-top:10px;
  border-radius: 20px;
  font-size: 15px;
  line-height: 1.4;
  word-wrap: break-word;
  white-space: normal;
  animation: fadeIn 0.5s ease-in-out;
  margin-bottom: 7px; /* Adds space between messages */
  display: block;
  background-color: #f0f0f0; /* Receiver's message (gray) */
  color: #333333;
  text-align: left;
  border-bottom-right-radius: 10px; /* Rounded corners */
  margin-right: auto;
}

.sender-message {
  max-width: 50%;
  padding: 8px;
  padding-top:12px;
  border-radius: 20px;
  font-size: 15px;
  line-height: 1.4;
  word-wrap: break-word;
  white-space: normal;
  animation: fadeIn 0.5s ease-in-out;
  margin-bottom: 7px; /* Adds space between messages */
  display: block;
  background-color: #1282A2; /* Sender's message (blue) */
  color: #ffffff;
  text-align: left;
  border-bottom-right-radius: 10px; /* Rounded corners */
  margin-left: auto;
}

/* Hide scrollbar, but allow scroll behavior */
#chat-body {
  overflow-y: auto;
  max-height: 300px;
}

#chat-body::-webkit-scrollbar {
  display: none; /* Hide the scrollbar in webkit-based browsers */
}

#chat-body {
  -ms-overflow-style: none;  /* For Internet Explorer */
  scrollbar-width: none;  /* For Firefox */
}

.fa-regular{
    font-size: larger;}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>asm_home_page_icons</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Home Page Icons</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	if (!input) {
		// Get notification table
		data.Notification = [];
		data.count = 0;

		grNotification = new GlideRecord('x_1522458_automo_0_notification');
		grNotification.addEncodedQuery("receiverDYNAMIC90d1921e5f510100a9ad2572f2b477fe");
		grNotification.query();

		while (grNotification.next()) {
			var seen = grNotification.getDisplayValue('seen');
			data.Notification.push({
				request: grNotification.getDisplayValue('request'),
				reciever: grNotification.getDisplayValue('receiver'),
				seen: seen ,
				type: grNotification.getDisplayValue('type'),
				created: grNotification.getDisplayValue('sys_created_on'),
				sys_id : grNotification.getDisplayValue('request.sys_id'),
				notificationId : grNotification.getDisplayValue('sys_id')
			});
			
			if(seen === "false"){
				data.count++
			}
		}
		
		//gs.addInfoMessage(data.count);
		var seenRequests = new Set();  // To keep track of seen requests with type "Feedback"
		data.Notification = data.Notification.filter(function(notification) {
			if (notification.type === "Feedback") {
				if (seenRequests.has(notification.request)) {
					return false; // Remove duplicate notification
				} else {
					seenRequests.add(notification.request); // Add this request to the set
					return true;
				}
			}
			return true; // Keep other types
		});


		// get date from the request of the inspection task

		data.Notification.forEach(function(notification) {
			if (notification.type === "Inspection"){
				
				// get the task that has request number = notification request number
				gr = new GlideRecord("x_1522458_automo_0_task");
				gr.addEncodedQuery("request.number="+notification.request+"^insoection=true");
				gr.query();
				
				while(gr.next()){
					notification.inspectionDate = gr.getDisplayValue('date');
				}
				
			}else if (notification.type === "Offer"){
				// get the task that has request number = notification request number
				
				gr = new GlideRecord("x_1522458_automo_0_offer");
				gr.addEncodedQuery("request_number.number="+notification.request);
				gr.query();
				
				while(gr.next()){
					notification.Offer = gr.getDisplayValue('sys_id');
				}
				
			}
		});
	}
	
	if(input){
		
		//gs.addInfoMessage("Inside If Condition");
		
		grNotification = new GlideRecord('x_1522458_automo_0_notification');
		
		//gs.addInfoMessage("Input id " + input.ID);
		
		var id = input.ID;
		
		grNotification.addEncodedQuery("sys_id="+id);
		grNotification.query();
		
		while(grNotification.next()){
			
			gs.addInfoMessage("gr id "+grNotification.getDisplayValue('sys_id'));
			grNotification.setValue("seen", true);
      grNotification.update();
		}
		
	}
	
	
	
	
	 data.messages = [];
  var instanceUrl = gs.getProperty('glide.servlet.uri');
  // Get the current user's sys_id
  var currentUserID = gs.getUserID();

  // Query the 'x_1522458_automo_0_chating' table to get messages
  var grChat = new GlideRecordSecure('x_1522458_automo_0_chating');
  grChat.addEncodedQuery('senderDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORreceiverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
  grChat.orderBy('sys_created_on');
  grChat.query();
  
  // Loop through chat records and push data into the array
  while (grChat.next()) {
    var messages = {};
    messages.message = grChat.getValue('message');
    messages.sender = grChat.getValue('sender');
    messages.receiver = grChat.getValue('receiver');
    var createdDateTime = new GlideDateTime(grChat.getValue('sys_created_on'));
    var timeOnly = createdDateTime.getLocalTime().getByFormat('hh:mm a'); // Format to hh:mm AM/PM
    messages.created = timeOnly;

    
    data.messages.push(messages);
  }

  // Pass the current user's sys_id to the client script
  data.currentUser = currentUserID;

  // Determine the department and manager
  var userGr = new GlideRecord('sys_user');
  if (userGr.get(currentUserID)) {
		
    var departmentSysID = userGr.getValue('department'); // Get the department sys_id
    if (departmentSysID) {
      var managerGr = new GlideRecord('sys_user');
			
      if (departmentSysID === "3d510ffa83429210cccd5d10feaad3d1") {
        // Engine department
        if (managerGr.get("803a7a3283429210cccd5d10feaad3d3")) {
          data.managerName = managerGr.getValue('first_name') + " " + managerGr.getValue('last_name');
					var imageSysId = managerGr.getValue('photo');
          var imageUrl = getImageUrl(imageSysId);
				  data.managerPhoto = imageUrl ;
        }
      } else if (departmentSysID === "1a814bfa83429210cccd5d10feaad3d7") {
        // Body department
        if (managerGr.get("af7a32b283429210cccd5d10feaad3b3")) {
          data.managerName = managerGr.getValue('first_name') + " " + managerGr.getValue('last_name');
					var imageId = managerGr.getValue('photo');
          var image = getImageUrl(imageId);
					data.managerPhoto = image ;
        }
      }
    }
  }
	 function getImageUrl(imageSysId) {
    if (!imageSysId) return ''; // Return empty string if no image Sys ID

    var attachmentGr = new GlideRecord('sys_attachment');
    attachmentGr.addQuery('sys_id', imageSysId);
    attachmentGr.query();

    if (attachmentGr.next()) {
      return instanceUrl + '/sys_attachment.do?sys_id=' + attachmentGr.sys_id; // Construct full image URL
    }
    return ''; // Return empty if no image is found
  }

  // Insert a new message into the 'x_1522458_automo_0_chating' table if provided in the input
  if (input && input.message) {
    var receiverID = "35cc6c08839b1210cccd5d10feaad3b6";

    

    if (receiverID) {
      var gr = new GlideRecord("x_1522458_automo_0_chating");
      gr.initialize();
      gr.setValue("message", input.message);
      gr.setValue("sender", currentUserID);
      gr.setValue("receiver", receiverID);
      gr.insert();
    }
  }
})();


]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-25 12:37:18</sys_created_on>
        <sys_id>5aac32ff83e61250cccd5d10feaad335</sys_id>
        <sys_mod_count>171</sys_mod_count>
        <sys_name>Home Page Icons</sys_name>
        <sys_package display_value="Automotive Service Management" source="x_1522458_automo_0">22ad9dee83861210cccd5d10feaad392</sys_package>
        <sys_policy/>
        <sys_scope display_value="Automotive Service Management">22ad9dee83861210cccd5d10feaad392</sys_scope>
        <sys_update_name>sp_widget_5aac32ff83e61250cccd5d10feaad335</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-23 07:54:38</sys_updated_on>
        <template><![CDATA[<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<!-- Homepage Icons container -->
<div class="homepage-icons">
  <!-- Notification Button -->
  <div id="toggleButton" class="notification-container" ng-click="c.redirect()">
    <button class="notification-button">
      <i class="fa-regular fa-bell"></i>
      <span class="badge">{{c.data.count}}</span>
    </button>
  </div>

  <div>
  <div id="chat-container" class="chat-container hidden">
    <div class="chat-header" >
     <div style="display: flex; align-items: center;">
    
    <span style="margin-left: 10px;">Customer Support</span>
  </div>
      <button ng-click="c.closeChat()" style="border:none; background:none; color:white; font-size:24px; cursor:pointer;">&times;</button>
    </div>

    <div class="chat-body" id="chat-body" ng-scroll="scrollToBottom()">
  <!-- ng-repeat will display messages here -->
  <div 
      ng-repeat="msg in c.data.messages" 
      ng-class="{
        'sender-message': msg.sender === c.currentUser,  
        'receiver-message': msg.receiver === c.currentUser
      }">
    <p>{{msg.message}}  
      <span style="float:right; margin-top:20px; font-size:11px;">
        {{msg.created | date:'hh:mm a'}} <!-- 12-hour format with AM/PM -->
      </span>
    </p>
  </div>
</div>


    <div class="form-group">
      <input
        type="text"
        id="chat-input"
        placeholder="Type a message..."
        class="form-control"
        ng-model="c.data.message"
        ng-keydown="c.checkEnterKey($event)"
      />
      <input ng-click="c.sendMessage()" value="Send" type="submit" />
    </div>
  </div>

 <div class="Container">
  <div class="chatbot-button" ng-click="c.openChat()">
    <i class="icon fa-solid fa-comment-dots"></i>
    <span id="chat-notification" class="notification-counter" ng-show="c.newMessageCount > 0">{{ c.newMessageCount }}</span>
  </div>
</div>

</div>



 


  <div id="sidebar" class="sidebar">
    
    <h2>
      Notifications
    </h2>

    <div class="content"  >
      <div class="CONTAINER" ng-repeat="s in c.data.Notification">
    <div class="CardsContainer" ng-if="s.type != 'Offer'" >
        <div class="card" ng-click="c.redirectRequest(s.sys_id, s.notificationId)" ng-class="{'seen-card': s.seen === 'true'}">
            <h3>Request {{s.request}}</h3>
            <p ng-switch="s.type">
                <span ng-switch-when="Inspection">Get ready! You have an inspection appointment on {{s.inspectionDate}} &#x1F600;.</span>
                <span ng-switch-when="Repair">We're working on your vehicle. Stay tuned &#x1F609;.</span>
                <span ng-switch-when="Feedback">Congratulations!&#x1F389; &#x1F389; Your vehicle is fixed! ... Give us your feedback &#x1F60A;.</span>
                <span ng-switch-default>No specific type provided.</span>
            </p>
        </div>
    </div>

    <div class="CardsContainer" ng-if="s.type === 'Offer'" >
        <div class="card" ng-click="c.redirectOffer(s.Offer, s.notificationId)" ng-class="{'seen-card': s.seen === 'true'}">
            <h3>Request {{s.request}}</h3>
            <p>Congratulation&#x1F62E;!You have a service offer!</p>
        </div>
    </div>
</div>



    </div>

  </div>
</div>

 
]]></template>
    </sp_widget>
</record_update>
